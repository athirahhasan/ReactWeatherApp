{"ast":null,"code":"var _jsxFileName = \"/Users/athirah/Desktop/my-app/src/App.js\";\nimport React from \"react\";\nimport Title from './ComponentWeather/Title';\nimport Form from './ComponentWeather/Form';\nimport moment from 'moment';\nimport Weathercomp from './ComponentWeather/WeatherComp';\nconst API_KEY = \"cd145d87dcca3f37dda7707b8047db95\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //Country : undefined,\n      city: undefined,\n      Datecity: undefined,\n      Temperature: undefined,\n      description: undefined,\n      listdesc: []\n    };\n\n    this.getWeather = async e => {\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      e.preventDefault(); //const api_call = await fetch('//api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=cd145d87dcca3f37dda7707b8047db95&units=metric');\n\n      const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const data = await api_call.json();\n      console.log(data);\n      this.setState({\n        //country : data.city.country,\n        //city : data.city.name,\n        //Datecity : data.list[2].dt_txt,\n        //Temperature : data.list[2].main.temp,\n        //description : data.list[2].weather[0].description,\n        listdesc: data.list\n      });\n    };\n\n    this.getcurrentWeather = async e => {\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      e.preventDefault(); //const api_call = await fetch('//api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=cd145d87dcca3f37dda7707b8047db95&units=metric');\n\n      const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const data = await api_call.json();\n      console.log(data);\n      this.setState({\n        country: data.city.country,\n        city: data.city.name,\n        Datecity: data.list[2].dt_txt,\n        Temperature: data.list[2].main.temp,\n        description: data.list[2].weather[0].description //listdesc : data.list,\n\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Form, {\n      getWeather: this.getWeather,\n      getcurrentWeather: this.getcurrentWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Weathercomp, {\n      Temperature: this.state.Temperature,\n      city: this.state.city,\n      country: this.state.country,\n      description: this.state.description,\n      Datecity: this.state.Datecity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), this.state.listdesc.map(d => {\n      if (d.dt_txt.substr(d.dt_txt.length - 8) === \"21:00:00\") {\n        return React.createElement(\"div\", {\n          key: d.dt_txt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, moment(new Date(d.dt_txt)).format(\"DD MMMM YYYY , dddd\"), \" \", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }), Math.round(d.main.temp_min), \"\\xB0C  - \", Math.round(d.main.temp_max), \" \\xB0C\");\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/athirah/Desktop/my-app/src/App.js"],"names":["React","Title","Form","moment","Weathercomp","API_KEY","App","Component","state","city","undefined","Datecity","Temperature","description","listdesc","getWeather","e","target","elements","value","country","preventDefault","api_call","fetch","data","json","console","log","setState","list","getcurrentWeather","name","dt_txt","main","temp","weather","render","map","d","substr","length","Date","format","Math","round","temp_min","temp_max"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Title from './ComponentWeather/Title';\nimport Form from './ComponentWeather/Form';\nimport moment from 'moment'\nimport Weathercomp from './ComponentWeather/WeatherComp';\n\nconst API_KEY = \"cd145d87dcca3f37dda7707b8047db95\";\n\nclass App extends React.Component {\n\n  state = {\n    //Country : undefined,\n    city : undefined,\n    Datecity : undefined,\n    Temperature : undefined,\n    description : undefined,\n    listdesc :[]\n  }\n\n  getWeather = async(e) => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n      //const api_call = await fetch('//api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=cd145d87dcca3f37dda7707b8047db95&units=metric');\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\n      const data= await api_call.json();\n      console.log(data);\n\n      this.setState({\n          //country : data.city.country,\n          //city : data.city.name,\n          //Datecity : data.list[2].dt_txt,\n          //Temperature : data.list[2].main.temp,\n          //description : data.list[2].weather[0].description,\n          listdesc : data.list,\n          \n      });\n\n\n  }\n  getcurrentWeather = async(e) => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n      //const api_call = await fetch('//api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=cd145d87dcca3f37dda7707b8047db95&units=metric');\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\n      const data= await api_call.json();\n      console.log(data);\n\n      this.setState({\n          country : data.city.country,\n          city : data.city.name,\n          Datecity : data.list[2].dt_txt,\n          Temperature : data.list[2].main.temp,\n          description : data.list[2].weather[0].description,\n          //listdesc : data.list,\n          \n      });\n\n\n  }\n\n  render(){\n    return (\n      <div>\n        <Title/>\n        <Form getWeather={this.getWeather} getcurrentWeather={this.getcurrentWeather}/> \n        <Weathercomp\n          Temperature={this.state.Temperature} \n          city={this.state.city}\n          country={this.state.country}\n          description={this.state.description}\n          Datecity ={this.state.Datecity}\n\n        />\n\n        {this.state.listdesc.map(d => {\n          if(d.dt_txt.substr(d.dt_txt.length - 8) === \"21:00:00\"){\n            return(\n            <div key = {d.dt_txt}>\n            {moment(new Date(d.dt_txt)).format(\"DD MMMM YYYY , dddd\")} <span/>\n            {Math.round(d.main.temp_min)}&deg;C  - {Math.round(d.main.temp_max)} &deg;C \n            </div>\n              )\n          }\n        }\n\n          )}\n\n      </div>     \n      )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}